function image = PDCSensorIrradiance(image,camera)% image = PDCSensorIrradiance(image,camera)%% Convert a hyperspectral image in units of quanta % to an image describing quanta arriving at the sensor% array.%% The basis for the calculation is from Rodieck's book, page% 467, and the surrounding material.%% HISTORY%		9/24/98  baw, pc  Wrote it.%   5/4/99   dhb      Convert to work in the context of the simulator toolbox.% Check image typeif (image.type ~= 'hyperspectral')	error('PDCSensorIrradiance: only operates on hyperspectral images\n');endif (image.unit ~= 'Quanta')	error('PDCSensorIrradiance: input image units are not ''Quanta'''\n');end% Extract scene dimensions.nRows = image.height;nCols = image.width;nWaves = image.wavelengthSampling.numberSamples;S = [image.wavelengthSampling.start image.wavelengthSampling.step image.wavelengthSampling.numberSamples];% Spline transmittance to image hyperspectral wavelength sampling% and put into a form to multiply into image.  This seems very% inefficient, since we could just multiply by a single number for% each image plane, rather than do it pixel by pixel.lens = camera.pdc.lens;lensS = [lens.wavelengthSampling.start lens.wavelengthSampling.step lens.wavelengthSampling.numberSamples];lens.transmittance = SplineSrf(lensS,lens.transmittance,S);transmittance = lens.transmittance(:,ones(1,nRows*nCols));transmittance = reshape(transmittance,[nWaves nCols nRows]);transmittance = permute(transmittance,[3 2 1]);% Scale the image.% %	1/f = 1/s_o + 1/s_i	where f>0 for converging lens and f<0 for diverging lens%										s_0>0 on the left of the lens and s_i>0 on the right of the lens%% Note that posteriorNodalDistance = imageDistanceimageDistance = inv(1/lens.effectiveFocalLength-1/image.cameraDistance);magnification = -imageDistance/scene.Distance;posteriorNodalDistance = lens.effectiveFocalLength * (1 - magnification);% Compute image irradience.  This includes lens fNumber and lens transmittance,% but not much else as I understand it.irradiance = pi * 1/(1+4*lens.fNumber^2*(1-magnification)^2) * (image.images .* transmittance);%***************************************************% These are some alternate formulae that were commented out% when I got to the routine - dhb.%***************************************************% 2) For f# >> 1:	1/(1+4x^2) = 1/(4x^2) if 4x^2 >> 1%irradiance = pi/4*1/(lens.fNumber)^2 * (scene.data.photons .* transmittance);% 3) Rodieck:%irradiance =(lens.clearAperture / posteriorNodalDistance^2) * (scene.data.photons .* transmittance)% Cos^4 drop-off%irradiance = irradiance*cos(theta)^4;