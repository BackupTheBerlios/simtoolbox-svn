function  wellFillup = checkWellFillup(photonImage,cmosChip,integrationTime,spatialResolution)%	AUTHOR: Peter Catrysse%	DATE: July-August 1998%%	photonImage:		array		[nCols nRows nWaves nColorChannels]%							nCols and nRows are the indices for the spatial dimensions of the image%							nWaves is the index for the spectral information for every pixel%							nColorChannels is the index for each of the 3 color channels%%	integrationTime:	scalar%%	wellFillup:			structure used for autoexposure%%% Creating the Current Density Image%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nRows = size(photonImage,1); nCols = size(photonImage,2); nWaves = size(photonImage,3);test = reshape(photonImage,[nRows*nCols nWaves]);if (nWaves == 361)	spectralQE = cmosChip.spectralQE;elseif (nWaves == 31)   spectralQE = cmosChip.spectralQE(31:10:331);endcurrentDensityImage = test*spectralQE;				% [e-/nm]currentDensityImage = reshape(currentDensityImage,[nRows nCols]);%% From Current Density to Electron Image%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%electronDensityImage = currentDensityImage * integrationTime;									% [electrons/m^2]electronImage = applyGeometricMTF(electronDensityImage,cmosChip,spatialResolution);		% [electrons]%% Creating the Charge Image%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nRows = size(electronImage,1); nCols = size(electronImage,2);if (max(electronImage(:)) > cmosChip.fullWellCapacity)   disp('Saturation is occurring ...')   electronImage = PDCclip(electronImage,cmosChip.fullWellCapacity);else   %disp('Charge image has been calculated ...')end%% Check the Well Fillup%%%%%%%%%%%%%%%%%%%%%%%%%%[wellFillup.maxValue, wellFillup.maxLocation]= max(electronImage(:));[wellFillup.minValue, wellFillup.minLocation]= min(electronImage(:));wellFillup.maxValue = wellFillup.maxValue/cmosChip.fullWellCapacity;wellFillup.minValue = wellFillup.minValue/cmosChip.fullWellCapacity;wellFillup.maxLocation = [ceil(wellFillup.maxLocation/nRows) wellFillup.maxLocation-nRows*floor(wellFillup.maxLocation/nRows)];wellFillup.minLocation = [ceil(wellFillup.minLocation/nRows) wellFillup.minLocation-nRows*floor(wellFillup.minLocation/nRows)];disp(sprintf('Fillup of Wells is %2.2f percent at Row %d Column %d',round(wellFillup.maxValue*10000)/100,wellFillup.maxLocation(2),wellFillup.maxLocation(1)))disp(sprintf('Minimum signal is %2.2f percent at Row %d Column %d',round(wellFillup.minValue*10000)/100,wellFillup.minLocation(2),wellFillup.minLocation(1)))return;