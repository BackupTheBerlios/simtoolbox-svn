function cmosChip = PDCSetChipParameters(chipType,pixelSize,fillFactor,noiseLevel,nBits,adcCurve)% cmosChip = PDCSetChipParameters(chipType,pixelSize,fillFactor,noiseLevel,nBits,adcCurve)%% Set up the parameter structure for the CMOS sensor chip.  Additional comments% would be helpful.%% HISTORY%   4/10/99  pc  Wrote it.%   5/4/99   dhb Modify for use in Simulator Toolbox.   % Physical Constantse = 1.6e-19;											% [C]nu = 3e8./((370:730)'*1e-9);			% [1/s]h_nu = 6.62e-34.*nu;							% [J]% Handle each chip type separatelyswitch (chipType)	case 'Abbas',	  diodeSwitch = 'closed';		diodeCap = 6.8e-15;												% [F]		storageCap = 24.6e-15;										% [F]		if strcmp(diodeSwitch,'closed')	   	capacitance = diodeCap + storageCap;		% [F]		elseif strcmp(diodeSwitch,'open')	   	capacitance = diodeCap;									% [F]		end		  % ADSwing = gain * fullWellCapacity;  So A/D input swing  = 695 mV for 2^17 electrons, 5.31uV/e- gain and 17 bit ADC		% This was an old representation with ADSwing the dependent parameter and fullWellCapacity and gain the independent parameters		% 2^17 e- = 131072 e-			% [V] Input range of AD is 0.5-2.5 Volts		ADSwing = 2;		   	  % We calculate fullWellCapacity using the input swing of the A/D convertor and the capacitance of the storage node 		% (1) The actual voltage can either be measured or derived. The digital value (DN) set at 640 corresponds to 2.5 Volt. 		% Basically, a digital number (DN) corresponds to 3.9063mV. So 640 x 3.9063 mV = 2.5 Volt for full-swing		% (2) The storage node can be either the diode node or the combination of the diode node and the storage node		% C_diode = 6.8e-15 F and C_storage = 24.6e-15 F		%		% So we have:	6.8e-15F * 2.5V / 1.6e-19C = 106,250 electrons ('default' mode)		% 					(6.8+24.6)*1e-15F * 2.5V / 1.6e-19C = 490,625 electrons ('reset-between-sample' mode)		fullWellCapacity = capacitance * ADSwing / e;	% [e-]			% [mV/e-] The gain is given by 1/C = 1.6e-19C / ((6.8+24.6)*1e-15F) = 5.09e-6 V/e-		% This is always so due to charge-sharing when you close the switch at some point		gain = e / (diodeCap + storageCap) * 1000;															                                            		pixelArea = (pixelSize/1e-6)^2;							% [m^2]			spectralQE = createSpectralQE('HP MOSIS');	% [1/nm]		responsivity = (spectralQE*e)./h_nu*1000;		% [mA/W]		peak responsivity = 16 mA/W for the HP MOSIS chip		darkResponse = 10*gain*pixelArea;						% 10 e-/(s um^2) dark response		darkCurrent = .160;													% [nA/cm^2]  	otherwise  		error(sprintf('PDCSetChipParameters: chip type %s not yet implemented\n',chipType));end% Fill in the structure.cmosChip.ADSwing = ADSwing;cmosChip.fullWellCapacity = fullWellCapacity;cmosChip.gain = gain;cmosChip.pixelArea = pixelArea;cmosChip.fillFactor = fillFactor;cmosChip.spectralQE = spectralQE;cmosChip.responsivity = responsivity;cmosChip.darkResponse = darkCurrent/(.016)*gain*pixelArea;cmosChip.darkCurrent = darkCurrent;cmosChip.nBits = nBits;cmosChip.noiseLevel = noiseLevel;cmosChip.adcCurve = adcCurve;