function lens = PDCCreateOptics(lensType,fNumber)% lens = PDCCreateOptics(lensType,fNumber)%% Create lens structure and data for use in PDC simulation.%% Both MTF and tarnsmittance are currently just set to% unity.  The MTF is specified as a scalar, which must% just be a placeholder.%% INPUT:%				lensType:						string%					'standard'%					'50mm'%					'35mm'%					'8mm'%				fNumber:				 		double%% OUTPUT:%				lens:													structure%					lens.effectiveFocalLength:	double%					lens.fNumber:								double%					lens.NA:										double%					lens.clearDiameter:					double%					lens.clearAperture:					double%					lens.transmittance:					vector%					lens.MTF:										double%					lens.wavelengthSampling:		structure%						lens.wavelengthSampling.start%						lens.wavelengthSampling.step%						lens.wavelengthSampling.numberSamples%% HISTORY%   9/24/98  pdc  Wrote it.%		5/4/99   dhb  Rewrote for compatibility with Simulator Toolbox.% Fixed lens parameterslens.wavelengthSampling.start = 380;lens.wavelengthSampling.step = 5;lens.wavelengthSampling.numberSamples = 81;% Specify transmittance.  Just clear for now.lens.transmittance = ones(lens.wavelengthSampling.numberSamples,1);% Specify MTF.lens.MTF = 1;% Set fNumber and numerical aperture.lens.fNumber = fNumber;lens.NA=1/(2*fNumber);% Generate some standard lens types.  Effective focal length% is in meters.  Why the effective focal length is computed% from an image size and field of view in some cases is% not immediately apparent. switch (lensType)	case 'standard',		lens.effectiveFocalLength = 0.005;	case '50mm',		nCols = 320;		nRows = 256;		pixelPitch = 10e-6;		ImageLength = pixelPitch*nRows;		ImageWidth = pixelPitch*nCols;		imageDiagonal = sqrt(ImageWidth^2+ImageLength^2);   	FOV = 46;		lens.effectiveFocalLength = inv(tan(FOV/180*pi)/2/imageDiagonal)/2;	case '35mm',		nCols = 320;		nRows = 256;		pixelPitch = 10e-6;		ImageLength = pixelPitch*nRows;		ImageWidth = pixelPitch*nCols;		imageDiagonal = sqrt(ImageWidth^2+ImageLength^2);		FOV = 80;		lens.effectiveFocalLength = inv(tan(FOV/180*pi)/2/imageDiagonal)/2;	case '8mm',		lens.effectiveFocalLength = 0.008;	otherwise,		error(sprintf('PDCCreateOptics: lens type %s not supported\n',lensType));end% Diameters are specified in meters and meters^2.lens.clearDiameter = lens.effectiveFocalLength/fNumber;lens.clearAperture = pi*(lens.clearDiameter/2)^2;